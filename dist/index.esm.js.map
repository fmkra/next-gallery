{"version":3,"file":"index.esm.js","sources":["../src/useWindowWidth.tsx","../src/Gallery.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport default function useWindowWidth() {\n    const [width, setWidth] = useState<null|number>(null)\n\n    useEffect(() => {\n        const handleResize = () => setWidth(window.innerWidth)\n        window.addEventListener('resize', handleResize)\n        handleResize()\n        return () => window.removeEventListener('resize', handleResize)\n    }, [])\n\n    return width\n}","import React, { useState, useMemo, Dispatch, SetStateAction, ReactElement } from 'react'\nimport Image, { ImageLoader } from 'next/image'\nimport useWindowWidth from './useWindowWidth'\n\nexport interface Image {\n    src: string\n    aspect_ratio: number\n    alt?: string\n}\n\nexport interface NamedImage<NameT> extends Image {\n    name: NameT\n}\n\nexport type GalleryProps<NameT, StateT> = {\n    widths: number[]\n    ratios: number[]\n    percentVw?: number\n    margin?: string\n    initState?: StateT\n    imgLoader?: ImageLoader\n    spanLastRow?: number\n} & (\n    | {\n          images: NamedImage<NameT>[]\n          overlay: (name: NameT, state: StateT, setState: Dispatch<SetStateAction<StateT>>) => ReactElement\n      }\n    | {\n          images: Image[]\n          overlay?: undefined\n      }\n)\n\nexport function Gallery<NameT, StateT>({\n    images,\n    widths,\n    ratios,\n    percentVw = 100,\n    margin = '2px',\n    initState,\n    imgLoader,\n    overlay,\n    spanLastRow = 0,\n}: GalleryProps<NameT, StateT>) {\n    const [state, setState] = useState<StateT[]>(new Array(images.length).fill(initState))\n\n    const [sizes, width_left] = useMemo(() => {\n        const sizes: number[][] = []\n        const wl: number[] = []\n        for (const ratio of ratios) {\n            let current_ratio = 0\n            let width_percent: number[] = []\n            for (let i = 0; i < images.length; i++) {\n                if (current_ratio + images[i].aspect_ratio <= ratio) {\n                    current_ratio += images[i].aspect_ratio\n                } else {\n                    for (let j = width_percent.length; j < i; j++) {\n                        width_percent.push(Math.floor((images[j].aspect_ratio / current_ratio) * 1000) / 10)\n                    }\n                    current_ratio = images[i].aspect_ratio\n                }\n            }\n            const width_left = Math.floor((1 - current_ratio / ratio) * 1000) / 10\n            const shouldSpan = 100 - width_left < spanLastRow\n            for (let i = width_percent.length; i < images.length; i++) {\n                width_percent.push(\n                    Math.floor((images[i].aspect_ratio / (shouldSpan ? ratio : current_ratio)) * 1000) / 10\n                )\n            }\n            sizes.push(width_percent)\n            wl.push(shouldSpan ? width_left : 0)\n        }\n        return [sizes, wl]\n    }, [images, ratios, spanLastRow])\n\n    const width = useWindowWidth()\n\n    const sizeLevel = useMemo(() => {\n        if (width === null) return null\n        const index = widths.findIndex((value) => value > width)\n        return index === -1 ? ratios.length - 1 : index\n    }, [width, widths, ratios])\n\n    if (width == null || sizeLevel === null) return null\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n            }}\n        >\n            {images.map((image, index) => (\n                <div\n                    key={index}\n                    style={{\n                        boxSizing: 'border-box',\n                        width: sizes[sizeLevel][index] + '%',\n                        flexShrink: 0,\n                        flexGrow: 1,\n                        position: 'relative',\n                        paddingBottom: sizes[sizeLevel][index] / image.aspect_ratio + '%',\n                    }}\n                >\n                    <div\n                        style={{\n                            position: 'absolute',\n                            top: margin,\n                            left: margin,\n                            right: margin,\n                            bottom: margin,\n                        }}\n                    >\n                        <Image\n                            src={image.src}\n                            alt={image.alt ?? ''}\n                            fill\n                            loader={imgLoader}\n                            sizes={\n                                widths\n                                    .map(\n                                        (width, i) => `(max-width: ${width}px) ${(percentVw / 100) * sizes[i][index]}vw`\n                                    )\n                                    .join(', ') + `, ${(percentVw / 100) * sizes[sizes.length - 1][index]}vw`\n                            }\n                        />\n                        {overlay ? (\n                            <div\n                                style={{\n                                    position: 'absolute',\n                                    top: 0,\n                                    left: 0,\n                                    right: 0,\n                                    bottom: 0,\n                                }}\n                            >\n                                {overlay((image as NamedImage<NameT>).name, state[index], (arg) => {\n                                    if (arg instanceof Function)\n                                        setState(state.map((value, i) => (i === index ? arg(value) : value)))\n                                    else setState(state.map((value, i) => (i === index ? arg : value)))\n                                })}\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            ))}\n            <div\n                style={{\n                    width: width_left[sizeLevel] + '%',\n                    flexShrink: 0,\n                    flexGrow: 1,\n                }}\n            ></div>\n        </div>\n    )\n}\n"],"names":["useWindowWidth","useState","width","setWidth","useEffect","handleResize","window","innerWidth","addEventListener","removeEventListener","Gallery","images","widths","ratios","percentVw","margin","initState","imgLoader","overlay","spanLastRow","Array","length","fill","state","setState","useMemo","sizes","wl","ratio","current_ratio","width_percent","i","aspect_ratio","j","push","Math","floor","width_left","shouldSpan","sizeLevel","index","findIndex","value","_jsxs","display","flexWrap","map","image","_jsx","boxSizing","flexShrink","flexGrow","position","paddingBottom","top","left","right","bottom","src","alt","join","name","arg","Function"],"mappings":"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"}