function t(t){return Math.floor(1e4*t)/100}const e=e=>{const o=Array.from({length:e.images.length},(()=>[])),s=[];for(const l of e.ratios){let r=0,a=[],n=0;for(let o=0;o<e.images.length;o++)if(r+e.images[o].aspect_ratio<=l)r+=e.images[o].aspect_ratio;else{n=a.length;for(let s=a.length;s<o;s++){const o=t(e.images[s].aspect_ratio/r);a.push(o)}r=e.images[o].aspect_ratio}const i=a.slice(n);for(let t=1;t<i.length;t++)i[t]+=i[t-1];i.push(100);let h=0;const c=a.length;let g=0;const f=[];for(let o=a.length;o<e.images.length;o++){const s=t(e.images[o].aspect_ratio/("fill"!=e.lastRowBehavior?l:r));for(a.push(s),g+=s;i[h]<g;)h++;f.push(i[h]/g)}if(a.slice(c),"match-previous"==e.lastRowBehavior){let t=100/g;for(const e of f)e<t&&(t=e);for(let e=c;e<a.length;e++)a[e]*=t}let p=100;for(let t=c;t<a.length;t++)p-=a[t];for(const t in a)o[t].push(a[t]);s.push(p)}return[o,s]};export{e as calculateImageSizes};
//# sourceMappingURL=calculateImageSizes.js.map
