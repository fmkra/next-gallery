function t(t){return Math.floor(1e4*t)/100}const e=e=>{var o;const s=Array.from({length:e.images.length},(()=>[])),l=[];for(const r of e.ratios){let n=0,a=[],i=0;for(let o=0;o<e.images.length;o++)if(n+e.images[o].aspect_ratio<=r)n+=e.images[o].aspect_ratio;else{i=a.length;for(let s=a.length;s<o;s++){const o=t(e.images[s].aspect_ratio/n);a.push(o)}n=e.images[o].aspect_ratio}const h=a.slice(i);for(let t=1;t<h.length;t++)h[t]+=h[t-1];h.push(100);let f=0;const g=a.length;let c=0;const p=[];for(let o=a.length;o<e.images.length;o++){const s=t(e.images[o].aspect_ratio/r);for(a.push(s),c+=s;h[f]<c;)f++;p.push(h[f]/c)}if("fill"==e.lastRowBehavior){const t=r/n;if(1>=t*(null!==(o=e.threshold)&&void 0!==o?o:0))for(let e=g;e<a.length;e++)a[e]*=t}else if("match-previous"==e.lastRowBehavior){let t=100/c;for(const e of p)e<t&&(t=e);for(let e=g;e<a.length;e++)a[e]*=t}let u=100;for(let t=g;t<a.length;t++)u-=a[t];for(const t in a)s[t].push(a[t]);l.push(u)}return[s,l]};export{e as calculateImageSizes};
//# sourceMappingURL=calculateImageSizes.js.map
